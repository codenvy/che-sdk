--- src/app/index.module.ts
+++ src/app/index.module.ts
@@ -35,11 +35,65 @@
 import {ChePreferences} from '../components/api/che-preferences.factory';


+function buildKeycloakConfig(keycloakSettings) {
+    return {
+        url: keycloakSettings['che.keycloak.auth_server_url'],
+        realm: keycloakSettings['che.keycloak.realm'],
+        clientId: keycloakSettings['che.keycloak.client_id']
+    };
+}
+
+let keycloakConfig;
+
 // init module
 let initModule = angular.module('userDashboard', ['ngAnimate', 'ngCookies', 'ngTouch', 'ngSanitize', 'ngResource', 'ngRoute',
   'angular-websocket', 'ui.bootstrap', 'ui.codemirror', 'ngMaterial', 'ngMessages', 'angularMoment', 'angular.filter',
   'ngDropdowns', 'ngLodash', 'angularCharts', 'ngClipboard', 'uuid4', 'angularFileUpload']);

+angular.element(document).ready(($injector) => {
+
+  let promise = $injector.get('../wsmaster/api/keycloak/settings');
+
+  function keycloakInit(keycloakSettings) {
+        keycloakConfig = buildKeycloakConfig(keycloakSettings);
+        new Promise((resolve, reject) => {
+          const script = document.createElement('script');
+          script.async = true;
+          script.src = keycloakSettings['che.keycloak.auth_server_url'] + '/js/keycloak.js';
+          script.addEventListener('load', resolve);
+          script.addEventListener('error', () => reject('Error loading script.'));
+          script.addEventListener('abort', () => reject('Script loading aborted.'));
+          document.head.appendChild(script);
+        })
+        .then(() => {
+          console.log('Keycloak script loaded in Dashboard');
+          window['_keycloak'] = Keycloak(keycloakConfig);
+          window['_keycloak'].init({
+            onLoad: 'login-required', checkLoginIframe: false
+          })
+          .success(() => {
+             angular.bootstrap(document, ['userDashboard'], {strictDi:true}); // manually bootstrap Angular
+            });
+         })
+        .catch(error => {
+           console.log('Keycloak script not loaded in Dashboard: ', error);
+        })
+  }
+
+  promise.then((keycloakSettings) => {
+    console.log('keycloakSettings : ', keycloakSettings);
+    keycloakInit(keycloakSettings);
+  }, (error) => {
+    console.log('Error when retrieving Keycloak settings:', error);
+  });
+
+  console.log('Running Keycloak init sequence');
+
+});
+
+initModule.factory('keycloak', $window => {
+    return $window._keycloak;
+});

 // add a global resolve flag on all routes (user needs to be resolved first)
 initModule.config(['$routeProvider', ($routeProvider: che.route.IRouteProvider) => {
@@ -56,7 +110,6 @@
           deferred.reject(error);
         });
       }
-
       return deferred.promise;
     }];

@@ -67,6 +120,7 @@
     route.resolve || (route.resolve = {});
     (route.resolve as any).app = ['$q', 'chePreferences', ($q: ng.IQService, chePreferences: ChePreferences) => {
       let deferred = $q.defer();
+
       if (chePreferences.getPreferences()) {
         deferred.resolve();
       } else {
@@ -76,9 +130,9 @@
           deferred.reject(error);
         });
       }
-
       return deferred.promise;
     }];
+
     return $routeProvider.otherwise(route);
   };

@@ -113,12 +167,11 @@
 /**
  * Setup route redirect module
  */
-initModule.run(['$rootScope', '$location', '$routeParams', 'routingRedirect', '$timeout', 'ideIFrameSvc', 'cheIdeFetcher', 'routeHistory', 'cheUIElementsInjectorService', 'workspaceDetailsService',
+initModule.run(['$rootScope', '$location', '$routeParams', 'routingRedirect', '$timeout','ideIFrameSvc', 'cheIdeFetcher', 'routeHistory', 'cheUIElementsInjectorService', 'workspaceDetailsService',
   ($rootScope, $location, $routeParams, routingRedirect, $timeout, ideIFrameSvc, cheIdeFetcher, routeHistory, cheUIElementsInjectorService, workspaceDetailsService) => {
     $rootScope.hideLoader = false;
     $rootScope.waitingLoaded = false;
     $rootScope.showIDE = false;
-
     workspaceDetailsService.addPage('SSH', '<workspace-details-ssh></workspace-details-ssh>', 'icon-ic_vpn_key_24px');

     // here only to create instances of these components
@@ -171,6 +224,39 @@
   }]);


+initModule.factory('KeyCloakTokenInterceptor', ($q, keycloak) => {
+  return {
+    request: (config) => {
+      if (keycloak && config.url.indexOf(keycloakConfig.url) > -1) {
+        return config;
+      }
+      if (keycloak && keycloak.token) {
+        let deferred = $q.defer();
+        keycloak.updateToken(5).success(function () {
+          config.headers = config.headers || {};
+          config.headers.Authorization = 'Bearer ' + keycloak.token;
+          deferred.resolve(config);
+        }).error(function () {
+          console.log('token refresh failed :' + config.url);
+          deferred.reject('Failed to refresh token');
+          keycloak.login();
+        });
+        return deferred.promise;
+      }
+      return config || $q.when(config);
+    },
+    response: (response) => {
+      return response || $q.when(response);
+    },responseError: (rejection)=>{
+        return $q.reject(rejection);
+    },
+    requestError: (rejection) =>{
+       return $q.reject(rejection);
+    }
+
+  }
+});
+
 // add interceptors
 initModule.factory('ETagInterceptor', ($window, $cookies, $q) => {

@@ -360,8 +446,10 @@
 });

 initModule.config(['$routeProvider', '$locationProvider', '$httpProvider', ($routeProvider, $locationProvider, $httpProvider) => {
+
+ $httpProvider.interceptors.push('KeyCloakTokenInterceptor');
   // add the ETag interceptor for Che API
-  $httpProvider.interceptors.push('ETagInterceptor');
+ $httpProvider.interceptors.push('ETagInterceptor');
 }]);


