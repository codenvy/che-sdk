/*******************************************************************************
 * Copyright (c) 2012-2017 Codenvy, S.A.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Codenvy, S.A. - initial API and implementation
 *******************************************************************************/
package org.eclipse.che.ide.command.manager;

import com.google.inject.Inject;
import com.google.inject.Singleton;

import org.eclipse.che.api.promises.client.Function;
import org.eclipse.che.api.promises.client.Promise;
import org.eclipse.che.ide.api.app.AppContext;
import org.eclipse.che.ide.api.command.CommandImpl;
import org.eclipse.che.ide.api.command.CommandManager;
import org.eclipse.che.ide.api.command.CommandType;
import org.eclipse.che.ide.api.workspace.model.WorkspaceConfigImpl;
import org.eclipse.che.ide.api.workspace.model.WorkspaceImpl;
import org.eclipse.che.ide.context.AppContextImpl;
import org.eclipse.che.ide.workspace.WorkspaceServiceClient;

import java.util.List;

/** Responsible for managing the commands which are stored with workspace. */
@Singleton
class WorkspaceCommandManagerDelegate {

    private final WorkspaceServiceClient workspaceServiceClient;
    private final AppContext             appContext;

    @Inject
    WorkspaceCommandManagerDelegate(WorkspaceServiceClient workspaceServiceClient, AppContext appContext) {
        this.workspaceServiceClient = workspaceServiceClient;
        this.appContext = appContext;
    }

    /** Returns commands which are stored in the current workspace. */
    List<CommandImpl> getCommands() {
        final WorkspaceImpl workspace = appContext.getWorkspace();
        final WorkspaceConfigImpl workspaceConfig = workspace.getConfig();

        return workspaceConfig.getCommands();
    }

    /**
     * Creates new command of the specified type.
     * <p><b>Note</b> that command's name will be generated by {@link CommandManager}
     * and command line will be provided by an appropriate {@link CommandType}.
     */
    Promise<CommandImpl> createCommand(final CommandImpl command) {
        return workspaceServiceClient.addCommand(appContext.getWorkspaceId(), command)
                                     .then((Function<WorkspaceImpl, CommandImpl>)workspace -> {
                                         // update workspace model in AppContext because
                                         // AppContext always must return an actual workspace model
                                         ((AppContextImpl)appContext).setWorkspace(workspace);
                                         return command;
                                     });
    }

    /**
     * Updates the command with the specified {@code name} by replacing it with the given {@code command}.
     * <p><b>Note</b> that name of the updated command may differ from the name provided by the given {@code command}
     * in order to prevent name duplication.
     */
    Promise<CommandImpl> updateCommand(final CommandImpl command) {
        return workspaceServiceClient.updateCommand(appContext.getWorkspaceId(), command.getName(), command)
                                     .then((Function<WorkspaceImpl, CommandImpl>)workspace -> {
                                         // update workspace model in AppContext because
                                         // AppContext always must return an actual workspace model
                                         ((AppContextImpl)appContext).setWorkspace(workspace);
                                         return command;
                                     });
    }

    /** Removes the command with the specified {@code commandName}. */
    Promise<Void> removeCommand(String commandName) {
        return workspaceServiceClient.deleteCommand(appContext.getWorkspaceId(), commandName)
                                     .then((Function<WorkspaceImpl, Void>)workspace -> {
                                         // update workspace model in AppContext because
                                         // AppContext always must return an actual workspace model
                                         ((AppContextImpl)appContext).setWorkspace(workspace);
                                         return null;
                                     });
    }
}
