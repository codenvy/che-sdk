[
  {
    "name": "web-java-petclinic",
    "displayName": "web-java-petclinic",
    "path": "/web-java-petclinic",
    "description": "Petclinic app using MySQL as persistent storage",
    "projectType": "maven",
    "mixins": [],
    "attributes": {
      "language": [
        "java"
      ]
    },
    "modules": [],
    "problems": [],
    "source": {
      "type": "git",
      "location": "https://github.com/che-samples/web-java-spring-petclinic.git",
      "parameters": {
        "branch": "mysql"
      }
    },
    "commands": [
      {
        "name": "build",
        "type": "mvn",
        "commandLine": "mvn -f ${current.project.path} clean install -DskipTests",
        "attributes": {
          "previewUrl": "",
          "goal": "Build"
        }
      },
      {
        "name": "stop tomcat",
        "type": "custom",
        "commandLine": "$TOMCAT_HOME/bin/catalina.sh stop",
        "attributes": {
          "previewUrl": "",
          "goal": "Run"
        }
      },
      {
        "name": "build and deploy",
        "type": "mvn",
        "commandLine": "mvn -f ${current.project.path} clean install -DskipTests \ncp ${current.project.path}/target/*.war $TOMCAT_HOME/webapps/ROOT.war \n$TOMCAT_HOME/bin/catalina.sh run 2>&1",
        "attributes": {
          "previewUrl": "${server.tomcat8}",
          "goal": "Run"
        }
      },
      {
        "name": "debug",
        "type": "mvn",
        "commandLine": "mvn -f ${current.project.path} clean install -DskipTests \ncp ${current.project.path}/target/*.war $TOMCAT_HOME/webapps/ROOT.war \n$TOMCAT_HOME/bin/catalina.sh jpda run 2>&1",
        "attributes": {
          "previewUrl": "${server.tomcat8}",
          "goal": "Debug"
        }
      }
    ],
    "links": [],
    "category": "Samples",
    "tags": [
      "Java 1.8, Tomcat 8, MySQL 5.7"
    ]
  },
  {
    "name": "blank-project",
    "displayName": "blank-project",
    "path": "/blank-project",
    "description": "A blank project example.",
    "projectType": "blank",
    "mixins": [],
    "attributes": {},
    "modules": [],
    "problems": [],
    "source": {
      "type": "git",
      "location": "https://github.com/che-samples/blank",
      "parameters": {}
    },
    "commands": [],
    "links": [],
    "category": "Samples",
    "tags": [
      "blank"
    ]
  },
  {
    "name": "c-simple-console",
    "displayName": "c-simple-console",
    "path": "/c-simple-console",
    "description": "A simple Hello World in C.",
    "projectType": "c",
    "mixins": [],
    "attributes": {},
    "modules": [],
    "problems": [],
    "source": {
      "type": "git",
      "location": "https://github.com/che-samples/c-simple-console.git",
      "parameters": {}
    },
    "commands": [
      {
        "name": "build and run",
        "type": "custom",
        "commandLine": "cd ${current.project.path} \ngcc -o Hello Hello.c \n./Hello",
        "attributes": {
          "previewUrl": "",
          "goal": "Run"
        }
      }
    ],
    "links": [],
    "category": "Samples",
    "tags": [
      "cpp",
      "gcc"
    ]
  },
  {
    "name": "mobile-android-simple",
    "displayName": "mobile-android-simple",
    "path": "/mobile-android-simple",
    "description": "Simple Android Project.",
    "projectType": "maven",
    "mixins": [],
    "attributes": {
      "language": [
        "java"
      ]
    },
    "modules": [],
    "problems": [],
    "source": {
      "type": "git",
      "location": "https://github.com/che-samples/mobile-android-simple.git",
      "parameters": {}
    },
    "commands": [
      {
        "name": "build",
        "type": "custom",
        "commandLine": "mvn -f ${current.project.path} clean install",
        "attributes": {
          "previewUrl": "${server.VNC}",
          "goal": "Run"
        }
      },
      {
        "name": "install-apk",
        "type": "custom",
        "commandLine": "adb install -r ${current.project.path}/target/*.apk",
        "attributes": {
          "goal": "Run"
        }
      }
    ],
    "links": [],
    "category": "Samples",
    "tags": [
      "Android"
    ]
  },
  {
    "name": "mobile-android-hello-world",
    "displayName": "mobile-android-hello-world",
    "path": "/mobile-android-hello-world",
    "description": "Simple Android Hello World.",
    "projectType": "maven",
    "mixins": [],
    "attributes": {
      "language": [
        "java"
      ]
    },
    "modules": [],
    "problems": [],
    "source": {
      "type": "git",
      "location": "https://github.com/che-samples/mobile-android-hello-world.git",
      "parameters": {}
    },
    "commands": [
      {
        "name": "run",
        "type": "custom",
        "commandLine": "mvn -f ${current.project.path} clean install",
        "attributes": {
          "previewUrl": "${server.VNC}",
          "goal": "Run"
        }
      },
      {
        "name": "install-apk",
        "type": "custom",
        "commandLine": "adb install -r ${current.project.path}/target/*.apk",
        "attributes": {
          "goal": "Run"
        }
      }

    ],
    "links": [],
    "category": "Samples",
    "tags": [
      "Android"
    ]
  },
  {
    "name": "web-go-simple",
    "displayName": "web-go-simple",
    "path": "/web-go-simple",
    "description": "Simple Go Hello World.",
    "projectType": "golang",
    "mixins": [

    ],
    "attributes": {
      "language": [
        "go"
      ]
    },
    "modules": [

    ],
    "problems": [

    ],
    "source": {
      "type": "git",
      "location": "https://github.com/che-samples/web-go-simple.git",
      "parameters": {

      }
    },
    "commands": [
      {
        "name": "run",
        "type": "custom",
        "commandLine": "cd ${current.project.path} \ngo get -d \ngo run main.go",
        "attributes": {
          "previewUrl": "${server.8080/tcp}",
          "goal": "Run"
        }
      }
    ],
    "links": [

    ],
    "category": "Samples",
    "tags": [
      "Go"
    ]
  },
  {
    "name": "desktop-go-simple",
    "displayName": "desktop-go-simple",
    "path": "/desktop-go-simple",
    "description": "Simple Go Hello World.",
    "projectType": "blank",
    "mixins": [

    ],
    "attributes": {
      "language": [
        "go"
      ]
    },
    "modules": [

    ],
    "problems": [

    ],
    "source": {
      "type": "git",
      "location": "https://github.com/che-samples/desktop-go-simple.git",
      "parameters": {

      }
    },
    "commands": [
      {
        "name": "run",
        "type": "custom",
        "commandLine": "cd ${current.project.path} \ngo get -d \ngo run main.go",
        "attributes": {
          "previewUrl": "",
          "goal": "Run"
        }
      }
    ],
    "links": [

    ],
    "category": "Samples",
    "tags": [
      "Go"
    ]
  },
  {
    "name": "console-python3-simple",
    "displayName": "console-python3.5-simple",
    "path": "/console-python3-simple",
    "description": "Simple Python3.5 Project.",
    "projectType": "python",
    "mixins": [],
    "attributes": {
      "language": [
        "python"
      ]
    },
    "modules": [],
    "problems": [],
    "source": {
      "type": "git",
      "location": "https://github.com/che-samples/console-python3-simple.git",
      "parameters": {}
    },
    "commands": [
      {
        "name": "run",
        "type": "custom",
        "commandLine": "cd ${current.project.path} \npython main.py",
        "attributes": {
          "previewUrl": "",
          "goal": "Run"
        }
      }
    ],
    "links": [],
    "category": "Samples",
    "tags": [
      "Python 3.5"
    ]
  },
  {
    "name": "web-rails-simple",
    "displayName": "web-rails-simple",
    "path": "/web-rails-simple",
    "description": "Simple Rails Project.",
    "projectType": "blank",
    "mixins": [],
    "attributes": {
      "language": [
        "rails"
      ]
    },
    "modules": [],
    "problems": [],
    "source": {
      "type": "git",
      "location": "https://github.com/che-samples/web-rails-simple.git",
      "parameters": {}
    },
    "commands": [
      {
        "name": "install dependencies",
        "type": "custom",
        "commandLine": "cd ${current.project.path} \nbundle install",
        "attributes": {
          "previewUrl": "",
          "goal": "Build"
        }
      },
      {
        "name": "run",
        "type": "custom",
        "commandLine": "cd ${current.project.path} \nrails server -b 0.0.0.0",
        "attributes": {
          "previewUrl": "${server.3000/tcp}",
          "goal": "Run"
        }
      }
    ],
    "links": [],
    "category": "Samples",
    "tags": [
      "ruby",
      "rails"
    ]
  },
  {
    "name": "console-ruby-simple",
    "displayName": "console-ruby-simple",
    "path": "/console-ruby-simple",
    "description": "Simple Ruby Project.",
    "projectType": "blank",
    "mixins": [],
    "attributes": {
      "language": [
        "ruby"
      ]
    },
    "modules": [],
    "problems": [],
    "source": {
      "type": "git",
      "location": "https://github.com/che-samples/console-ruby-simple.git",
      "parameters": {}
    },
    "commands": [
      {
        "name": "run",
        "type": "custom",
        "commandLine": "cd ${current.project.path} \nruby main.rb",
        "attributes": {
          "previewUrl": "",
          "goal": "Run"
        }
      }
    ],
    "links": [],
    "category": "Samples",
    "tags": [
      "ruby",
      "rails"
    ]
  },
  {
    "name": "nodejs-hello-world",
    "displayName": "nodejs-hello-world",
    "path": "/nodejs-hello-world",
    "description": "Simple NodeJS Project.",
    "projectType": "node-js",
    "mixins": [],
    "attributes": {
      "language": [
        "javascript"
      ]
    },
    "modules": [],
    "problems": [],
    "source": {
      "type": "git",
      "location": "https://github.com/che-samples/web-nodejs-sample.git",
      "parameters": {}
    },
    "commands": [
      {
        "name": "run",
        "type": "custom",
        "commandLine": "cd ${current.project.path} \n node .",
        "attributes": {
          "previewUrl": "${server.3000/tcp}",
          "goal": "Run"
        }
      }
    ],
    "links": [],
    "category": "Samples",
    "tags": [
      "Node.JS"
    ]
  },
  {
    "name": "angular-patternfly-starter",
    "displayName": "angular-patternfly-starter",
    "path": "/angular-patternfly-starter",
    "description": "Angular PatternFly Starter Project.",
    "projectType": "node-js",
    "mixins": [],
    "attributes": {
      "language": [
        "javascript"
      ]
    },
    "modules": [],
    "problems": [],
    "source": {
      "type": "git",
      "location": "https://github.com/che-samples/angular-patternfly-demo-app.git",
      "parameters": {}
    },
    "commands": [
      {
        "name": "install dependencies",
        "type": "custom",
        "commandLine": "cd ${current.project.path} \nnpm install --no-bin-links \nbower install",
        "attributes": {
          "previewUrl": "",
          "goal": "Build"
        }
      },
      {
        "name": "run",
        "type": "custom",
        "commandLine": "cd ${current.project.path} \ngrunt server --force",
        "attributes": {
          "previewUrl": "${server.3000/tcp}",
          "goal": "Run"
        }
      }
    ],
    "links": [],
    "category": "Samples",
    "tags": [
      "nodejs",
      "patternfly",
      "javascript",
      "Node.JS"
    ]
  },
  {
    "name": "web-java-spring",
    "displayName": "web-java-spring",
    "path": "/web-java-spring",
    "description": "A basic example using Spring servlets. The app returns values entered into a submit form.",
    "projectType": "maven",
    "mixins": [],
    "attributes": {
      "language": [
        "java"
      ]
    },
    "modules": [],
    "problems": [],
    "source": {
      "type": "git",
      "location": "https://github.com/che-samples/web-java-spring.git",
      "parameters": {}
    },
    "commands": [
      {
        "name": "build",
        "type": "mvn",
        "commandLine": "mvn -f ${current.project.path} clean install \ncp ${current.project.path}/target/*.war $TOMCAT_HOME/webapps/ROOT.war",
        "attributes": {
          "previewUrl": "",
          "goal": "Build"
        }
      },
      {
        "name": "run tomcat",
        "type": "custom",
        "commandLine": "$TOMCAT_HOME/bin/catalina.sh run 2>&1",
        "attributes": {
          "previewUrl": "${server.tomcat8}",
          "goal": "Run"
        }
      },
      {
        "name": "stop tomcat",
        "type": "custom",
        "commandLine": "$TOMCAT_HOME/bin/catalina.sh stop",
        "attributes": {
          "previewUrl": "",
          "goal": "Run"
        }
      },
      {
        "name": "build and run",
        "type": "mvn",
        "commandLine": "mvn -f ${current.project.path} clean install \ncp ${current.project.path}/target/*.war $TOMCAT_HOME/webapps/ROOT.war \n$TOMCAT_HOME/bin/catalina.sh run 2>&1",
        "attributes": {
          "previewUrl": "${server.tomcat8}",
          "goal": "Run"
        }
      },
      {
        "name": "debug",
        "type": "mvn",
        "commandLine": "mvn -f ${current.project.path} clean install \ncp ${current.project.path}/target/*.war $TOMCAT_HOME/webapps/ROOT.war \n$TOMCAT_HOME/bin/catalina.sh jpda run 2>&1",
        "attributes": {
          "previewUrl": "${server.tomcat8}",
          "goal": "Debug"
        }
      }
    ],
    "links": [],
    "category": "Samples",
    "tags": [
      "tomcat"
    ]
  },
  {
    "name": "console-cpp-simple",
    "displayName": "console-cpp-simple",
    "path": "/console-cpp-simple",
    "description": "The app will print Hello World to the console.",
    "projectType": "blank",
    "mixins": [],
    "attributes": {
      "language": [
        "cpp"
      ]
    },
    "modules": [],
    "problems": [],
    "source": {
      "type": "git",
      "location": "https://github.com/che-samples/console-cpp-simple.git",
      "parameters": {}
    },
    "commands": [
      {
        "name": "build and run",
        "type": "custom",
        "commandLine": "cd ${current.project.path} \nmake \n./a.out",
        "attributes": {
          "previewUrl": "",
          "goal": "Run"
        }
      }
    ],
    "links": [],
    "category": "Samples",
    "tags": [
      "cpp",
      "gcc"
    ]
  },
  {
    "name": "nodejs-crud-sample",
    "displayName": "Nodejs Postgres Sample",
    "path": "/nodejs-crud",
    "description": "Express app with Postgres database",
    "projectType": "node-js",
    "mixins": [],
    "attributes": {
      "language": [
        "javascript"
      ]
    },
    "modules": [],
    "problems": [],
    "source": {
      "type": "git",
      "location": "https://github.com/nodeshift-starters/nodejs-rest-http-crud.git",
      "parameters": {}
    },
    "commands": [
      {
        "name": "install dependencies",
        "type": "custom",
        "commandLine": "cd ${current.project.path} \nnpm install",
        "attributes": {
          "previewUrl": "",
          "goal": "Build"
        }
      }
    ],
    "links": [],
    "category": "Samples",
    "tags": [
      "nodejs-postgres"
    ]
  },
  {
    "name": "web-nodejs-simple",
    "displayName": "web-nodejs-simple",
    "path": "/web-nodejs-simple",
    "description": "Yeoman Starter project.",
    "projectType": "node-js",
    "mixins": [],
    "attributes": {
      "language": [
        "javascript"
      ]
    },
    "modules": [],
    "problems": [],
    "source": {
      "type": "git",
      "location": "https://github.com/che-samples/web-nodejs-simple.git",
      "parameters": {}
    },
    "commands": [
      {
        "name": "install dependencies",
        "type": "custom",
        "commandLine": "cd ${current.project.path} \nnpm install \nbower install",
        "attributes": {
          "previewUrl": "",
          "goal": "Build"
        }
      },
      {
        "name": "run",
        "type": "custom",
        "commandLine": "cd ${current.project.path} \ngrunt serve --force",
        "attributes": {
          "previewUrl": "${server.9000/tcp}",
          "goal": "Run"
        }
      }
    ],
    "links": [],
    "category": "Samples",
    "tags": [
      "Node.JS"
    ]
  },
  {
    "name": "web-php-simple",
    "displayName": "web-php-simple",
    "path": "/web-php-simple",
    "description": "A hello world PHP script.",
    "projectType": "php",
    "mixins": [],
    "attributes": {
      "language": [
        "php"
      ]
    },
    "modules": [],
    "problems": [],
    "source": {
      "type": "git",
      "location": "https://github.com/che-samples/web-php-simple.git",
      "parameters": {}
    },
    "commands": [],
    "links": [],
    "category": "Samples",
    "tags": [
      "apache",
      "php",
      "centos-php"
    ]
  },
  {
    "name": "web-php-gae-simple",
    "displayName": "web-php-gae-simple",
    "path": "/web-php-gae-simple",
    "description": "A hello world PHP script to deploy to GAE.",
    "projectType": "php",
    "mixins": [],
    "attributes": {
      "language": [
        "php"
      ]
    },
    "modules": [],
    "problems": [],
    "source": {
      "type": "git",
      "location": "https://github.com/che-samples/web-php-gae-simple.git",
      "parameters": {}
    },
    "commands": [
      {
        "name": "run",
        "type": "custom",
        "commandLine": "/home/user/google_appengine/dev_appserver.py 2>&1 --php_executable_path=/usr/bin/php-cgi7.0 --enable_host_checking false --skip_sdk_update_check true --host=0.0.0.0 --admin_host=0.0.0.0 ${current.project.path}",
        "attributes": {
          "previewUrl": "${server.8080/tcp}",
          "goal": "Run"
        }
      }
    ],
    "links": [],
    "category": "Samples",
    "tags": [
      "php"
    ]
  },
  {
    "name": "console-java-simple",
    "displayName": "console-java-simple",
    "path": "/console-java-simple",
    "description": "A hello world Java application.",
    "projectType": "maven",
    "mixins": [],
    "attributes": {
      "language": [
        "java"
      ]
    },
    "modules": [],
    "problems": [],
    "source": {
      "type": "git",
      "location": "https://github.com/che-samples/console-java-simple.git",
      "parameters": {}
    },
    "commands": [
      {
        "name": "maven build",
        "type": "mvn",
        "commandLine": "mvn -Duser.home=${HOME} -f ${CHE_PROJECTS_ROOT}/console-java-simple clean install",
        "attributes": {
          "previewUrl": "",
          "goal": "Build"
        }
      },
      {
        "name": "maven build and run",
        "type": "mvn",
        "commandLine": "mvn -Duser.home=${HOME} -f ${CHE_PROJECTS_ROOT}/console-java-simple clean install \njava -jar ${CHE_PROJECTS_ROOT}/console-java-simple/target/*.jar",
        "attributes": {
          "previewUrl": "",
          "goal": "Run"
        }
      },
      {
        "name": "gradle build",
        "type": "gralde",
        "commandLine": "cd ${CHE_PROJECTS_ROOT}/console-java-simple; gradle build",
        "attributes": {
          "previewUrl": "",
          "goal": "Build"
        }
      },
      {
        "name": "gradle run",
        "type": "gradle",
        "commandLine": "cd ${CHE_PROJECTS_ROOT}/console-java-simple; gradle run",
        "attributes": {
          "previewUrl": "",
          "goal": "Run"
        }
      }
    ],
    "links": [],
    "category": "Samples",
    "tags": [
      "java",
      "maven",
      "gradle"
    ]
  },
  {
    "name": "dotnet-web-simple",
    "displayName": "dotnet-web-simple",
    "path": "/dotnet-web-simple",
    "description": "A simple .NET 2.0 web sample.",
    "projectType": "csharp",
    "mixins": [],
    "attributes": {
      "language": [
        "dotnet"
      ]
    },
    "modules": [],
    "problems": [],
    "source": {
      "type": "git",
      "location": "https://github.com/che-samples/dotnet-web-simple.git",
      "parameters": {}
    },
    "commands": [
      {
        "name": "update dependencies",
        "type": "custom",
        "commandLine": "cd ${CHE_PROJECTS_ROOT}/dotnet-web-simple \ndotnet restore",
        "attributes": {
          "previewUrl": "",
          "goal": "Build"
        }
      },
      {
        "name": "run",
        "type": "custom",
        "commandLine": "cd ${CHE_PROJECTS_ROOT}/dotnet-web-simple \ndotnet run",
        "attributes": {
          "previewUrl": "${server.dotnet}",
          "goal": "Run"
        }
      }
    ],
    "links": [],
    "category": "Samples",
    "tags": [
      "Dotnet"
    ]
  },
  {
    "name": "aspnetcore-realworld-example-app",
    "displayName": "aspnetcore-realworld-example-app",
    "path": "/aspnetcore-realworld-example-app",
    "description": "ASP.NET Core backend implementation for RealWorld https://realworld.io",
    "projectType": "csharp",
    "mixins": [],
    "attributes": {
      "language": [
        "dotnet"
      ]
    },
    "modules": [],
    "problems": [],
    "source": {
      "type": "git",
      "location": "https://github.com/gothinkster/aspnetcore-realworld-example-app.git",
      "parameters": {}
    },
    "commands": [
      {
        "name": "install cake",
        "type": "custom",
        "commandLine": "cd ${CHE_PROJECTS_ROOT}/aspnetcore-realworld-example-app && dotnet tool install -g Cake.Tool",
        "attributes": {
          "previewUrl": "",
          "goal": "Build"
        }
      },
      {
        "name": "run cake",
        "type": "custom",
        "commandLine": "export PATH=\"$PATH:/home/user/.dotnet/tools\" && cd ${CHE_PROJECTS_ROOT}/aspnetcore-realworld-example-app && dotnet cake build.cake --runtime=linux-x64",
        "attributes": {
          "previewUrl": "",
          "goal": "Build"
        }
      },
      {
        "name": "run",
        "type": "custom",
        "commandLine": "cd ${CHE_PROJECTS_ROOT}/aspnetcore-realworld-example-app/publish && dotnet Conduit.dll",
        "attributes": {
          "previewUrl": "${server.5000/tcp}/swagger",
          "goal": "Run"
        }
      }
    ],
    "links": [],
    "category": "Samples",
    "tags": [
      "Dotnet"
    ]
  },
  {
    "name": "typescript-greeter",
    "displayName": "typescript-greeter",
    "path": "/mbed-blink",
    "description": "TypeScript greeter sample",
    "projectType": "typescript",
    "mixins": [],
    "attributes": {
      "language": [
        "typescript"
      ]
    },
    "modules": [],
    "problems": [],
    "source": {
      "type": "git",
      "location": "https://github.com/Microsoft/TypeScriptSamples.git",
      "parameters": {
        "keepDir": "greeter",
        "keepVcs": "false",
        "convertToTopLevelProject": "true"
      }
    },
    "commands": [],
    "links": [],
    "category": "Samples",
    "tags": [
      "TypeScript",
      "ts"
    ]
  },
  {
    "name": "ceylon-hello-world",
    "displayName": "ceylon-hello-world",
    "path": "/ceylon-hello-world",
    "description": "A Ceylon 'Hello World' project example that runs on all supported backends.",
    "projectType": "blank",
    "mixins": [],
    "attributes": {},
    "modules": [],
    "problems": [],
    "source": {
      "type": "git",
      "location": "https://github.com/che-samples/ceylon-hello-world",
      "parameters": {}
    },
    "commands": [],
    "links": [],
    "category": "Samples",
    "tags": [
      "Ceylon"
    ]
  },
  {
    "name": "vertx-http-booster",
    "displayName": "vertx-http-booster",
    "path": "/vertx-http-booster",
    "description": "HTTP Vert.x Booster",
    "projectType": "maven",
    "mixins": [],
    "attributes": {
      "language": [
        "java"
      ]
    },
    "modules": [],
    "problems": [],
    "source": {
      "type": "git",
      "location": "https://github.com/openshiftio-vertx-boosters/vertx-http-booster",
      "parameters": {}
    },
    "commands": [
      {
        "name": "build",
        "type": "mvn",
        "commandLine": "mvn -Duser.home=${HOME} -f ${CHE_PROJECTS_ROOT}/vertx-http-booster clean package",
        "attributes": {
          "previewUrl": "",
          "goal": "Build"
        }
      },
      {
        "name": "run",
        "type": "mvn",
        "commandLine": "mvn -Duser.home=${HOME} -f ${CHE_PROJECTS_ROOT}/vertx-http-booster vertx:run",
        "attributes": {
          "previewUrl": "${server.8080/tcp}",
          "goal": "Run"
        }
      }
    ],
    "links": [],
    "category": "Samples",
    "tags": [
      "Vert.x"
    ]
  },
  {
    "name": "vertx-health-checks-booster",
    "displayName": "vertx-health-checks-booster",
    "path": "/vertx-health-checks-booster",
    "description": "Booster demonstrating health checks and recovery",
    "projectType": "maven",
    "mixins": [],
    "attributes": {
      "language": [
        "java"
      ]
    },
    "modules": [],
    "problems": [],
    "source": {
      "type": "git",
      "location": "https://github.com/openshiftio-vertx-boosters/vertx-health-checks-booster",
      "parameters": {}
    },
    "commands": [
      {
        "name": "build",
        "type": "mvn",
        "commandLine": "cd ${CHE_PROJECTS_ROOT}/vertx-health-checks-booster; mvn -Duser.home=${HOME} clean package",
        "attributes": {
          "previewUrl": "",
          "goal": "Build"
        }
      },
      {
        "name": "run",
        "type": "mvn",
        "commandLine": "cd ${CHE_PROJECTS_ROOT}/vertx-health-checks-booster; mvn -Duser.home=${HOME} vertx:run",
        "attributes": {
          "previewUrl": "${server.8080/tcp}",
          "goal": "Run"
        }
      }
    ],
    "links": [],
    "category": "Samples",
    "tags": [
      "vert.x"
    ]
  },
  {
    "name": "spring-boot-http-booster",
    "displayName": "spring-boot-http-booster",
    "path": "/spring-boot-http-booster",
    "description": "Quickstart to expose a REST Greeting endpoint using SpringBoot and Apache Tomcat in embedded mode",
    "projectType": "maven",
    "mixins": [],
    "attributes": {
      "language": [
        "java"
      ]
    },
    "modules": [],
    "problems": [],
    "source": {
      "type": "git",
      "location": "https://github.com/snowdrop/spring-boot-http-booster",
      "parameters": {}
    },
    "commands": [],
    "links": [],
    "category": "Samples",
    "tags": [
      "Spring Boot"
    ]
  },
  {
    "name": "spring-boot-health-check-booster",
    "displayName": "spring-boot-health-check-booster",
    "path": "/spring-boot-health-check-booster",
    "description": "Quickstart to demonstrate OpenShift health probes working with Spring Boot Actuator",
    "projectType": "maven",
    "mixins": [],
    "attributes": {
      "language": [
        "java"
      ]
    },
    "modules": [],
    "problems": [],
    "source": {
      "type": "git",
      "location": "https://github.com/snowdrop/spring-boot-health-check-booster",
      "parameters": {}
    },
    "commands": [],
    "links": [],
    "category": "Samples",
    "tags": [
      "spring boot"
    ]
  },
  {
    "name": "spring-boot-gs-rest-service",
    "displayName": "spring-boot-gs-rest-service",
    "path": "/gs-rest-service",
    "description": "Spring Boot Guide to build a RESTful web service",
    "projectType": "maven",
    "mixins": [],
    "attributes": {
      "language": [
        "java"
      ]
    },
    "modules": [],
    "problems": [],
    "source": {
      "type": "git",
      "location": "https://github.com/spring-guides/gs-rest-service",
      "parameters": {}
    },
    "commands": [
      {
        "name": "mvn build",
        "type": "mvn",
        "commandLine": "mvn -Duser.home=${HOME} -f ${CHE_PROJECTS_ROOT}/gs-rest-service/complete clean package",
        "attributes": {
          "previewUrl": "",
          "goal": "Build"
        }
      },
      {
        "name": "mvn run",
        "type": "mvn",
        "commandLine": "mvn -Duser.home=${HOME} -f ${CHE_PROJECTS_ROOT}/gs-rest-service/complete spring-boot:run",
        "attributes": {
          "previewUrl": "${server.8080/tcp}/greeting",
          "goal": "Run"
        }
      },
      {
        "name": "gradle build",
        "type": "gralde",
        "commandLine": "cd ${CHE_PROJECTS_ROOT}/gs-rest-service/complete; gradle build",
        "attributes": {
          "previewUrl": "",
          "goal": "Build"
        }
      },
      {
        "name": "gradle run",
        "type": "gradle",
        "commandLine": "cd ${CHE_PROJECTS_ROOT}/gs-rest-service/complete; gradle bootRun",
        "attributes": {
          "previewUrl": "",
          "goal": "Run"
        }
      }
    ],
    "links": [],
    "category": "Samples",
    "tags": [
      "Spring Boot v2"
    ]
  },
  {
    "name": "wfswarm-rest-http",
    "displayName": "wfswarm-rest-http",
    "path": "/wfswarm-rest-http",
    "description": "Quickstart to expose a REST Greeting endpoint using Wildfly Swarm",
    "projectType": "maven",
    "mixins": [],
    "attributes": {
      "language": [
        "java"
      ]
    },
    "modules": [],
    "problems": [],
    "source": {
      "type": "git",
      "location": "https://github.com/wildfly-swarm-openshiftio-boosters/wfswarm-rest-http",
      "parameters": {}
    },
    "commands": [],
    "links": [],
    "category": "Samples",
    "tags": [
      "Wildfly Swarm"
    ]
  },
  {
    "name": "che-ide-server-extension",
    "displayName": "che-ide-server-extension",
    "path": "/che-ide-server-extension",
    "description": "A simple Che extension that brings a new UI menu item and REST service",
    "projectType": "maven",
    "mixins": [],
    "attributes": {
      "language": [
        "java"
      ]
    },
    "modules": [],
    "problems": [],
    "source": {
      "type": "git",
      "location": "https://github.com/che-samples/che-ide-server-extension.git",
      "parameters": {}
    },
    "commands": [],
    "links": [],
    "category": "Samples",
    "tags": [
      "SDK"
    ]
  },
  {
    "name": "che-ide-extension",
    "displayName": "che-ide-extension",
    "path": "/che-ide-extension",
    "description": "A simple Che extension that brings a new UI menu item",
    "projectType": "maven",
    "mixins": [],
    "attributes": {
      "language": [
        "java"
      ]
    },
    "modules": [],
    "problems": [],
    "source": {
      "type": "git",
      "location": "https://github.com/che-samples/che-ide-extension.git",
      "parameters": {}
    },
    "commands": [],
    "links": [],
    "category": "Samples",
    "tags": [
      "SDK"
    ]
  },
  {
    "name": "python-hello-world",
    "displayName": "python-hello-world",
    "path": "/python-hello-world",
    "description": "Python Hello World Project.",
    "projectType": "python",
    "mixins": [],
    "attributes": {
      "language": [
        "python"
      ]
    },
    "modules": [],
    "problems": [],
    "source": {
      "type": "git",
      "location": "https://github.com/che-samples/python-hello-world",
      "parameters": {}
    },
    "commands": [
      {
        "name": "run",
        "type": "custom",
        "commandLine": "cd ${CHE_PROJECTS_ROOT}/python-hello-world && python hello-world.py",
        "attributes": {
          "goal": "Run"
        }
      }
    ],
    "links": [],
    "category": "Samples",
    "tags": [
      "Python"
    ]
  },
  {
    "name": "django-realworld-example-app",
    "displayName": "django-realworld-example-app",
    "path": "/django-realworld-example-app",
    "description": "Django Real World Example.",
    "projectType": "python",
    "mixins": [],
    "attributes": {
      "language": [
        "python"
      ]
    },
    "modules": [],
    "problems": [],
    "source": {
      "type": "git",
      "location": "https://github.com/gothinkster/django-realworld-example-app",
      "parameters": {}
    },
    "commands": [
      {
        "name": "install requirements",
        "type": "custom",
        "commandLine": "cd ${CHE_PROJECTS_ROOT}/django-realworld-example-app && pip install -r requirements.txt",
        "attributes": {
          "goal": "Run"
        }
      },
      {
        "name": "migrate",
        "type": "custom",
        "commandLine": "cd ${CHE_PROJECTS_ROOT}/django-realworld-example-app && python manage.py migrate",
        "attributes": {
          "goal": "Run"
        }
      },
      {
        "name": "patch resources",
        "type": "custom",
        "commandLine": "cd ${CHE_PROJECTS_ROOT}/django-realworld-example-app && sed -i \"s/ALLOWED_HOSTS = \\[\\]/ALLOWED_HOSTS = \\['*'\\]/g\" conduit/settings.py",
        "attributes": {
          "goal": "Run"
        }
      },
      {
        "name": "run server",
        "type": "custom",
        "commandLine": "cd ${CHE_PROJECTS_ROOT}/django-realworld-example-app && python manage.py runserver 0.0.0.0:7000",
        "attributes": {
          "previewUrl": "${server.django}/admin",
          "goal": "Run"
        }
      }
    ],
    "links": [],
    "category": "Samples",
    "tags": [
      "Python", "Django"
    ]
  },
  {
    "name": "go-web-sample",
    "displayName": "go-web-sample",
    "path": "/go-web-sample",
    "description": "Go Web Sample.",
    "projectType": "go",
    "mixins": [],
    "attributes": {
      "language": [
        "go"
      ]
    },
    "modules": [],
    "problems": [],
    "source": {
      "type": "git",
      "location": "https://github.com/che-samples/go-web-sample",
      "parameters": {}
    },
    "commands": [
      {
        "name": "run",
        "type": "custom",
        "commandLine": "cd ${CHE_PROJECTS_ROOT}/go-web-sample && go run main.go",
        "attributes": {
          "goal": "Run"
        }
      },
      {
        "name": "build",
        "type": "custom",
        "commandLine": "cd ${CHE_PROJECTS_ROOT}/go-web-sample && go build",
        "attributes": {
          "goal": "Build"
        }
      },
      {
        "name": "test",
        "type": "custom",
        "commandLine": "cd ${CHE_PROJECTS_ROOT}/go-web-sample && go test ./...",
        "attributes": {
          "goal": "Test"
        }
      }
    ],
    "links": [],
    "category": "Samples",
    "tags": [
      "Go"
    ]
  },
  {
    "name": "go-realworld-example-app",
    "displayName": "go-realworld-example-app",
    "path": "/src/github.com/xesina/golang-echo-realworld-example-app",
    "description": "Go Real World Sample.",
    "projectType": "go",
    "mixins": [],
    "attributes": {
      "language": [
        "go"
      ]
    },
    "modules": [],
    "problems": [],
    "source": {
      "type": "git",
      "location": "https://github.com/xesina/golang-echo-realworld-example-app",
      "parameters": {}
    },
    "commands": [
      {
        "name": "install dependency management tool",
        "type": "custom",
        "commandLine": "curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh",
        "attributes": {
          "goal": "Run"
        }
      },
      {
        "name": "install dependencies",
        "type": "custom",
        "commandLine": "cd ${CHE_PROJECTS_ROOT}/src/github.com/xesina/golang-echo-realworld-example-app && dep ensure -v",
        "attributes": {
          "goal": "Run"
        }
      },
      {
        "name": "go run",
        "type": "custom",
        "commandLine": "cd ${CHE_PROJECTS_ROOT}/src/github.com/xesina/golang-echo-realworld-example-app && go run main.go",
        "attributes": {
          "goal": "Run"
        }
      },
      {
        "name": "go build",
        "type": "custom",
        "commandLine": "cd ${CHE_PROJECTS_ROOT}/src/github.com/xesina/golang-echo-realworld-example-app && go build",
        "attributes": {
          "goal": "Build"
        }
      },
      {
        "name": "go test",
        "type": "custom",
        "commandLine": "cd ${CHE_PROJECTS_ROOT}/src/github.com/xesina/golang-echo-realworld-example-app && go test ./...",
        "attributes": {
          "goal": "Test"
        }
      },
      {
        "name": "user create",
        "type": "custom",
        "commandLine": "curl --header \"Content-Type: application/json\" --request POST   --data '\"'\"'{\"user\": {\"Username\":\"user\", \"Email\":\"user@user.user\", \"Password\": \"password\"}}'\"'\"'  localhost:1323/api/users",
        "attributes": {
          "goal": "Test"
        }
      },
      {
        "name": "user login",
        "type": "custom",
        "commandLine": "curl --header \"Content-Type: application/json\" --request POST   --data '\"'\"'{\"user\": {\"Email\":\"user@user.user\", \"Password\": \"password\"}}'\"'\"'  localhost:1323/api/users/login",
        "attributes": {
          "goal": "Test"
        }
      }
    ],
    "links": [],
    "category": "Samples",
    "tags": [
      "Go"
    ]
  }
]
