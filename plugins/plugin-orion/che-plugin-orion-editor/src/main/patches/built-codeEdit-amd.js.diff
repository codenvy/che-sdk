This patch fixes bug with linked mode and reduces amount of scrolling lines.
This patch fixes bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=482536 in Orion 10.
Bug482536 is already fixed in Orion 11.
===================================================================
diff --git a/org/eclipse/che/ide/editor/orion/public/built-codeEdit-10.0/code_edit/built-codeEdit-amd.js b/org/eclipse/che/ide/editor/orion/public/built-codeEdit-10.0/code_edit/built-codeEdit-amd.js
--- a/org/eclipse/che/ide/editor/orion/public/built-codeEdit-10.0/code_edit/built-codeEdit-amd.js
+++ b/org/eclipse/che/ide/editor/orion/public/built-codeEdit-10.0/code_edit/built-codeEdit-amd.js
@@ -5709,13 +5709,13 @@
 			var actionTaken = false;
 			if (!this.isVisible()) {
 				this.dispatchEvent({type: "triggered", dropdown: this, event: mouseEvent}); //$NON-NLS-0$
-				lib.setFramesEnabled(false);
 				if (this._populate) {
 					this.empty();
 					this._populate(this._dropdownNode);
 				}
 				var items = this.getItems();
 				if (items.length > 0) {
+                    lib.setFramesEnabled(false);
 					if (this._boundAutoDismiss) {
 						lib.removeAutoDismiss(this._boundAutoDismiss);
 					} 
@@ -17601,6 +17601,7 @@
 		},
 		_handleMouseWheel: function (e) {
 			if (this._noScroll) return;
+			if(e.defaultPrevented) return;
 			var lineHeight = this._getLineHeight();
 			var pixelX = 0, pixelY = 0;
 			// Note: On the Mac the correct behaviour is to scroll by pixel.
@@ -28645,8 +28646,9 @@
 	'orion/editor/keyModes', //$NON-NLS-0$
 	'orion/editor/annotations', //$NON-NLS-0$
 	'orion/objects', //$NON-NLS-0$
+	'orion/editor/eventTarget',
 	'orion/util' //$NON-NLS-0$
-], function(messages, mKeyBinding, mKeyModes, mAnnotations, objects) {
+], function(messages, mKeyBinding, mKeyModes, mAnnotations, objects, mEventTarget) {

 	var exports = {};

@@ -28715,11 +28717,11 @@
 		this.linkedModeModel = null;

 		textView.setAction("linkedModeEnter", function() { //$NON-NLS-0$
-			this.exitLinkedMode(true);
+			this.exitLinkedMode(true, true);
 			return true;
 		}.bind(this));
 		textView.setAction("linkedModeCancel", function() { //$NON-NLS-0$
-			this.exitLinkedMode(false);
+			this.exitLinkedMode(false, false);
 			return true;
 		}.bind(this));
 		textView.setAction("linkedModeNextGroup", function() { //$NON-NLS-0$
@@ -28757,7 +28759,7 @@
 					changed = positionChanged.position;
 					if (changed === undefined || changed.model !== model) {
 						// The change has been done outside of the positions, exit the Linked Mode
-						this.exitLinkedMode(false);
+						this.exitLinkedMode(false, false);
 						model = this.linkedModeModel;
 					} else {
 						break;
@@ -28803,7 +28805,7 @@
 					changed = positionChanged.position;
 					if (changed === undefined || changed.model !== model) {
 						// The change has been done outside of the positions, exit the Linked Mode
-						this.exitLinkedMode(false);
+						this.exitLinkedMode(false, false);
 						model = this.linkedModeModel;
 					} else {
 						break;
@@ -28930,10 +28932,11 @@
 		 * Exits Linked Mode. Optionally places the caret at linkedMode escapePosition.
 		 * @param {Boolean} [escapePosition=false] if true, place the caret at the  escape position.
 		 */
-		exitLinkedMode: function(escapePosition) {
+		exitLinkedMode: function(escapePosition, successful) {
 			if (!this.isActive()) {
 				return;
 			}
+			this.dispatchEvent({type:"LinkedModeExit", isSuccessful: successful});
 			if (this._compoundChange) {
 				this.endUndo();
 				this._compoundChange = null;
@@ -29122,6 +29125,7 @@
 			annotationModel.replaceAnnotations(remove, add);
 		}
 	});
+	mEventTarget.EventTarget.addMixin(LinkedMode.prototype);
 	exports.LinkedMode = LinkedMode;

 	return exports;
